# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: AMI Main Deploy

on:
  push:
    branches:
      - main

jobs:
  packer_build:
    runs-on: ubuntu-latest
    env:
      ARTIFACT_NAME: csye6225-webapp-${{ github.run_number }}.zip
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Running Unit Test
        run: |
          npm i && npm test

      - name: Building Zip File
        run: |
          mkdir codedeploy_artifact
          zip -r nodeApi . -x ".git/*" ".github/*" "node_modules/*" "package-lock.json"
          mv nodeApi.zip codedeploy_artifact

      - name: Run Packer Container - Validate Template
        run: |
          cd packer
          packer init nodeApi.pkr.hcl
          packer validate -var-file=var.json nodeApi.pkr.hcl

      - name: Run Packer Container - Building Packer Template
        env:
          AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY}}
          AWS_SECRET_KEY: ${{secrets.AWS_SECRET_KEY}}
          AWS_REGION: ${{secrets.AWS_REGION}}
          SUBNET_ID: ${{secrets.SUBNET_ID}}
        run: |
          cd packer
          packer build \
          -var "zip_file_path=/home/runner/work/webapp/webapp/codedeploy_artifact/nodeApi.zip" \
          -var-file=var.json nodeApi.pkr.hcl
        
      - name: AWS Configure
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_KEY}}
          aws-region: ${{secrets.AWS_REGION}}
          
      - name: Retrieve AMI ID
        run: |
          echo AMI_ID=$(jq -r '.builds[-1].artifact_id' ./packer/manifest.json | cut -d ":" -f2) >> $GITHUB_ENV
          echo $AMI_ID
      
      - name: Creating launch template
        run: |
          aws ec2 create-launch-template-version --launch-template-name prodDemo-LaunchTemplate --source-version 1 --launch-template-data '{"ImageId":"${{env.AMI_ID}}"}'
      
      - name: Updating ASG
        run: |
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name prodDemo-ASG --launch-template LaunchTemplateId=${{ secrets.AWS_LAUNCH_TEMPLATE_ID }},Version='$Latest'
      
      - name: Refreshing Instance
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name prodDemo-ASG
